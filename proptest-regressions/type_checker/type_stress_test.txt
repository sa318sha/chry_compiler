# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc 05f036d5749b3dee89eda1ed92e8738abe739b54e2ff2507f4306b550c276f11 # shrinks to stmts = [If(Binary(Binary(Literal(Int(0)), Token { line: 1, tokentype: Plus, lexeme: "", literal: None }, Logical(Literal(Int(0)), Token { line: 1, tokentype: BangEqual, lexeme: "", literal: None }, Literal(Int(-69742)))), Token { line: 1, tokentype: Less, lexeme: "", literal: None }, Variable(Token { line: 1, tokentype: Identifier, lexeme: "a9e1s", literal: None })), Expression(Unary(Token { line: 1, tokentype: Minus, lexeme: "", literal: None }, Binary(Logical(Variable(Token { line: 1, tokentype: Identifier, lexeme: "h_ui", literal: None }), Token { line: 1, tokentype: BangEqual, lexeme: "", literal: None }, Literal(Float(0.0, "0.000000"))), Token { line: 1, tokentype: Greater, lexeme: "", literal: None }, Unary(Token { line: 1, tokentype: Minus, lexeme: "", literal: None }, Literal(Int(-432925582)))))), Some(Expression(Unary(Token { line: 1, tokentype: Minus, lexeme: "", literal: None }, Variable(Token { line: 1, tokentype: Identifier, lexeme: "w__dh", literal: None }))))), Block([Variable(Token { line: 1, tokentype: Identifier, lexeme: "o60_", literal: None }, Some(Int), Some(Binary(Binary(Variable(Token { line: 1, tokentype: Identifier, lexeme: "v", literal: None }), Token { line: 1, tokentype: GreaterEqual, lexeme: "", literal: None }, Variable(Token { line: 1, tokentype: Identifier, lexeme: "wi2", literal: None })), Token { line: 1, tokentype: LessEqual, lexeme: "", literal: None }, Unary(Token { line: 1, tokentype: Minus, lexeme: "", literal: None }, Literal(Bool(true)))))), Print(Grouping(Variable(Token { line: 1, tokentype: Identifier, lexeme: "m817", literal: None })))])]
